document.addEventListener("DOMContentLoaded", () => { let e = document.querySelector(".product-svg"); if (!e) { console.error('SVG element with class "product-svg" not found.'); return } let t = document.getElementById("craftsmanship"); if (!t) { console.error('Craftsmanship section with ID "craftsmanship" not found.'); return } let r = () => null !== t.offsetParent || "#craftsmanship" === window.location.hash, l = [{ labelSelector: ".feature-label.high-res", lineId: "line-high-res", labelAnchor: "right" }, { labelSelector: ".feature-label.forged-metal", lineId: "line-forged-metal", labelAnchor: "right" }, { labelSelector: ".feature-label.providers", lineId: "line-providers", labelAnchor: "right" }, { labelSelector: ".feature-label.buttons", lineId: "line-buttons", labelAnchor: "left" }]; function n() { if (!r()) return; let t = e.getBoundingClientRect(), i = e.viewBox.baseVal; if (!i || 0 === t.width || 0 === t.height) { requestAnimationFrame(n); return } l.forEach(t => { let r = document.querySelector(t.labelSelector), l = e.querySelector("#" + t.lineId); if (!r) { console.warn(`Label element with selector "${t.labelSelector}" not found.`); return } if (!l) { console.warn(`Line element with ID "${t.lineId}" not found.`); return } let n = r.getBoundingClientRect(), i, a; i = "right" === t.labelAnchor ? n.right : n.left, a = n.top + n.height / 2; let o = e.createSVGPoint(); o.x = i, o.y = a; let s = o.matrixTransform(e.getScreenCTM().inverse()); l.setAttribute("x1", s.x), l.setAttribute("y1", s.y) }) } requestAnimationFrame(() => { n() }); let i; if (window.addEventListener("resize", () => { clearTimeout(i), i = setTimeout(n, 50) }), window.addEventListener("hashchange", () => { requestAnimationFrame(n) }), "undefined" != typeof MutationObserver) { let a = new MutationObserver(e => { for (let t of e) if ("attributes" === t.type || "childList" === t.type || "characterData" === t.type) { requestAnimationFrame(n); break } }); a.observe(t, { attributes: !0, childList: !0, subtree: !0, characterData: !0 }) } });